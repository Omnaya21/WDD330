{"version":3,"sources":["authHelpers.js","auth.js","week11.js"],"names":["Errors","errorElementId","errorElement","document","getElementById","error","callback","code","message","substring","displayError","console","log","innerHTML","classList","remove","add","baseURL","makeRequest","url","method","body","token","options","headers","JSON","stringify","Authorization","fetch","response","json","data","ok","Error","status","Auth","errorHandler","jwtToken","user","errors","password","username","postData","email","value","accessToken","getCurrentUser","hideLogin","clearError","handleError","age","id","result","showLogin","myErrors","myAuth","loginForm","querySelector","addEventListener","login","getPosts","ul","i","length","li","createElement","appendChild","createTextNode","title","createPost","form","forms","postForm","dir","validity","valid","content","res"],"mappings":"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","file":"week11.552391f8.js","sourceRoot":"../src","sourcesContent":["export class Errors {\n    constructor(errorElementId) {\n      this.errorElement = document.getElementById(errorElementId);\n    }\n  \n    handleError(error, callback) {\n      // parse out the error code from the error string\n      const code = error.message.substring(0, 3);\n      this.displayError(error);\n      // if it is something related to authentication then show the login form again.\n      if (code == 500 || code == 401) {\n        callback();\n      }\n      console.log(code);\n    }\n  \n    displayError(error) {\n      this.errorElement.innerHTML = error.message;\n      this.errorElement.classList.remove('hidden');\n    }\n    clearError() {\n      this.errorElement.innerHTML = '';\n      this.errorElement.classList.add('hidden');\n    }\n  }\n  const baseURL = 'http://127.0.0.1:1234/';\n  // helper function to make an http request with fetch.\n  // returns a promise to a json object\n  export async function makeRequest(\n    url,\n    method = 'GET',\n    body = null,\n    token = null\n  ) {\n    let options = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    // if we are sending any data with the request add it here\n    if (method == 'POST' || method == 'PUT') {\n      options.body = JSON.stringify(body);\n    }\n    // if a token was passed in we should send it on.\n    if (token) {\n      options.headers.Authorization = `Bearer ${token}`;\n    }\n    const response = await fetch(baseURL + url, options);\n    // in this case we are processing the response as JSON before we check the status. The API will send back more meaningful error messages than the default messages in the response, but we have to convert it before we can get to them.\n    const data = await response.json();\n  \n    if (!response.ok) {\n      // server will send a 500 server error if the token expires...or a 401 if we are not authorized, ie bad username/password combination, and a 404 if the URL we requested does not exist. All of these would cause response.ok to be false\n  \n      console.log(response);\n      throw new Error(`${data.status}: ${data.message}`);\n    } else {\n      return data;\n    }\n    // not catching the error here...so we will need to catch it later on and handle it.\n  }","//Auth class which provides basic JWT based authentication for our app.\n// Requires: access to the makeRequest function\nimport { makeRequest } from './authHelpers.js';\n\nexport default class Auth {\n  constructor(errorHandler) {\n    this.jwtToken = '';\n    this.user = {};\n    this.errors = errorHandler;\n  }\n\n  async login(callback) {\n    const password = document.getElementById('password');\n    const username = document.getElementById('username');\n    const postData = {\n      email: username.value,\n      password: password.value\n    };\n    try {\n      const data = await makeRequest('login', 'POST', postData);\n      // a successful response...we have a token!  Store it since we will need to send it with every request to the API.\n      this.jwtToken = data.accessToken;\n      // let's get the user details as well and store them locally in the class\n      this.user = await this.getCurrentUser(username.value);\n      console.log(data);\n\n      // hide the login form.\n      hideLogin();\n      // clear the password\n      password.value = '';\n      // clear any errors from the login process\n      this.errors.clearError();\n      // since we have a token let's go grab some data from the API\n      callback();\n    } catch (error) {\n      // if there were any errors display them\n      this.errors.handleError(error);\n      console.log(error);\n    }\n  }\n  // uses the email of the currently logged in user to pull up the full user details for that user from the database\n  async getCurrentUser(email) {\n    try {\n      const data = await makeRequest(\n        'users?email=' + email,\n        'GET',\n        null,\n        this.jwtToken\n      );\n\n      console.log(data);\n      return data[0];\n    } catch (error) {\n      // if there were any errors display them\n      this.errors.handleError(error);\n\n      console.log(error);\n    }\n  }\n  async updateUser() {\n    // after logging in we pulled down the user from the api...including the id...we can use that to do our update.\n\n    this.user.age = 40;\n    try {\n      const result = await makeRequest(\n        'users/' + this.user.id,\n        'PUT',\n        this.user,\n        this.jwtToken\n      );\n      console.log('Update user:', result);\n    } catch (error) {\n      this.errors.handleError(error, showLogin);\n    }\n  }\n\n  set token(value) {\n    // we need this for the getter to work...but we don't want to allow setting the token through this so we are leaving it blank.\n  }\n  get token() {\n    return this.jwtToken;\n  }\n} // end auth class\n\nfunction showLogin() {\n  document.getElementById('login').classList.remove('hidden');\n}\n\nfunction hideLogin() {\n  document.getElementById('login').classList.add('hidden');\n}","import Auth from './auth.js';\nimport { Errors, makeRequest } from './authHelpers.js';\n// makeRequest('login', 'POST', {\n//   password: 'user1',\n//   email: 'user1@email.com'\n// });\n\nconst myErrors = new Errors('errors');\nconst myAuth = new Auth(myErrors);\n\nconst loginForm = document.getElementById('login');\nloginForm.querySelector('button').addEventListener('click', () => {\n  myAuth.login(getPosts);\n});\nasync function getPosts() {\n  try {\n    const data = await makeRequest('posts', 'GET', null, myAuth.token);\n    // make sure the element is shown\n    document.getElementById('content').classList.remove('hidden');\n    console.log(data);\n    var ul = document.getElementById('list');\n    ul.innerHTML = '';\n    for (var i = 0; i < data.length; i++) {\n      var li = document.createElement('li');\n      li.appendChild(document.createTextNode(data[i].title));\n      ul.appendChild(li);\n    }\n    myErrors.clearError();\n  } catch (error) {\n    // if there were any errors display them\n    myErrors.handleError(error);\n  }\n}\ndocument.getElementById('createSubmit').addEventListener('click', () => {\n  createPost();\n});\nasync function createPost() {\n  const form = document.forms.postForm;\n  console.dir(form);\n  if (form.title.validity.valid && form.content.validity.valid) {\n    myErrors.clearError();\n    const data = {\n      title: form.title.value,\n      content: form.content.value\n    };\n    try {\n      const res = await makeRequest('posts', 'POST', data, myAuth.token);\n      console.log('Post create:', data);\n      form.title.value = '';\n      form.content.value = '';\n      getPosts();\n    } catch (error) {\n      myErrors.handleError(error);\n    }\n  } else {\n    myErrors.displayError({ message: 'Title and Content are required' });\n  }\n}"]}